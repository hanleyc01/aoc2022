/* Directory operations.
*/
module interface std/os/dir
 
//------------------------------
//#kki: import declarations
 
import std/core/types = std/core/types = "";
import std/core/hnd = std/core/hnd = "";
import std/core = std/core = "";
import std/os/path = std/os/path = "";
 
//------------------------------
//#kki: external imports
 
 
//------------------------------
//#kki: fixity declarations
 
 
//------------------------------
//#kki: local imported aliases
 
// An alias for pure effects: a pure function always returns the same result
// when called with the same arguments but may not terminate or raise an exception.
local alias std/core/pure :: E = <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/div :: X)> = 1;
 
//------------------------------
//#kki: type declarations
 
 
//------------------------------
//#kki: declarations
 
fun prepend : (exn : std/core/exception, pre : std/core/types/string) -> std/core/exception;
fun prim-copy-file : (from : std/core/types/string, to : std/core/types/string, preserve-mtime : std/core/types/bool) -> <(std/core/fsys :: X)> (std/core/error :: V -> V)<()>;
fun ensure-dir-err : (path : std/core/types/string, mode : std/core/types/int) -> <(std/core/fsys :: X)> (std/core/error :: V -> V)<()>;
fun prim-is-dir : (dir : std/core/types/string) -> <(std/core/fsys :: X)> std/core/types/bool;
fun prim-list-dir : (dir : std/core/types/string) -> <(std/core/fsys :: X)> (std/core/error :: V -> V)<(std/core/types/vector :: V -> V)<std/core/types/string>>;
fun prim-is-file : (path : std/core/types/string) -> <(std/core/fsys :: X)> std/core/types/bool;
// Copy a file.
pub fun copy-file : (from : std/os/path/path, to : std/os/path/path, preserve-mtime : (std/core/types/optional :: V -> V)<std/core/types/bool>) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/fsys :: X)> ();
// Ensure a directory path exists
pub fun ensure-dir : (dir : std/os/path/path) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/fsys :: X)> ();
// Is the path a valid directory?
pub fun is-directory : (dir : std/os/path/path) -> <(std/core/fsys :: X)> std/core/types/bool;
// List directory contents (excluding `.` and `..`).
// Returns a list of full paths (not just the names in the directory).
pub fun list-directory : (dir : std/os/path/path) -> <(std/core/fsys :: X)> (std/core/list :: V -> V)<std/os/path/path>;
// monadic lift
fun .mlift909-copy-directory : (dirs : (std/core/list :: V -> V)<std/os/path/path>, to : std/os/path/path, wild_0 : ()) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/fsys :: X),(std/core/types/div :: X)> ();
// monadic lift
fun .mlift910-copy-directory : (to : std/os/path/path, .y.859 : ((std/core/list :: V -> V)<std/os/path/path>, (std/core/list :: V -> V)<std/os/path/path>)) -> <(std/core/fsys :: X),(std/core/types/div :: X),(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>> ();
// monadic lift
fun .mlift911-copy-directory : (dir : std/os/path/path, to : std/os/path/path, wild_ : ()) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/fsys :: X)> ();
pub fun copy-directory : (dir : std/os/path/path, to : std/os/path/path) -> <(std/core/pure :: E),(std/core/fsys :: X)> ();
// Copy a file to a directory
pub fun copy-file-to-dir : (from : std/os/path/path, dir : std/os/path/path) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/fsys :: X)> ();
// Is the path a valid file?
pub fun is-file : (path : std/os/path/path) -> <(std/core/fsys :: X)> std/core/types/bool;
// Recursively list all the entries under a directory.
pub fun list-directory-recursive : (dir : std/os/path/path, max-depth : (std/core/types/optional :: V -> V)<std/core/types/int>) -> <(std/core/types/div :: E),(std/core/fsys :: X)> (std/core/list :: V -> V)<std/os/path/path>;
 
//------------------------------
//#kki: external declarations
 
 
//------------------------------
//#kki: inline definitions
 
//.inline-section
specialize "_*" fun copy-directory // inline size: 1
  = fn<<(std/core/fsys :: X),(std/core/pure :: E)>>(dir: std/os/path/path, to: std/os/path/path){
    val _ : ()
      = std/os/dir/ensure-dir(to);
    val all : (std/core/list :: V -> V)<std/os/path/path>
      = std/core/types/.open<<(std/core/fsys :: X)>,<(std/core/fsys :: X),(std/core/types/div :: X),(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>>,(dir : std/os/path/path) -> <(std/core/fsys :: X)> (std/core/list :: V -> V)<std/os/path/path>,(dir : std/os/path/path) -> <(std/core/fsys :: X),(std/core/types/div :: X),(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>> (std/core/list :: V -> V)<std/os/path/path>>(std/os/dir/list-directory)(dir);
    match ((std/core/partition<std/os/path/path,<(std/core/fsys :: X),(std/core/types/div :: X),(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>>>(all, (std/core/types/.open<<(std/core/fsys :: X)>,<(std/core/fsys :: X),(std/core/types/div :: X),(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>>,(dir : std/os/path/path) -> <(std/core/fsys :: X)> std/core/types/bool,(dir : std/os/path/path) -> <(std/core/fsys :: X),(std/core/types/div :: X),(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>> std/core/types/bool>(std/os/dir/is-directory))))) {
      ((.skip std/core/types/(,)((dirs: (std/core/list :: V -> V)<std/os/path/path>) : (std/core/list :: V -> V)<std/os/path/path>, (files: (std/core/list :: V -> V)<std/os/path/path>) : (std/core/list :: V -> V)<std/os/path/path>) : ((std/core/list :: V -> V)<std/os/path/path>, (std/core/list :: V -> V)<std/os/path/path>) ) as .pat: ((std/core/list :: V -> V)<std/os/path/path>, (std/core/list :: V -> V)<std/os/path/path>))
         -> val _0 : ()
                  = std/core/foreach<std/os/path/path,<(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/fsys :: X),(std/core/types/div :: X)>>(files, (fn<<(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/fsys :: X),(std/core/types/div :: X)>>(f: std/os/path/path){
                      (std/os/dir/copy-file(f, (std/core/types/.open<(std/core/types/(<>) :: E),<(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/fsys :: X),(std/core/types/div :: X)>,(p1 : std/os/path/path, p2 : std/os/path/path) -> std/os/path/path,(p1 : std/os/path/path, p2 : std/os/path/path) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/fsys :: X),(std/core/types/div :: X)> std/os/path/path>(std/os/path/(/))(to, (std/core/types/.open<(std/core/types/(<>) :: E),<(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/fsys :: X),(std/core/types/div :: X)>,(p : std/os/path/path) -> std/os/path/path,(p : std/os/path/path) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/fsys :: X),(std/core/types/div :: X)> std/os/path/path>((fn(p: std/os/path/path){
                            val parts0.2041 : ((std/core/types/optional :: V -> V)<(std/core/list :: V -> V)<std/core/types/string>>)
                                  = (std/core/types/Optional<(std/core/list :: V -> V)<std/core/types/string>>((std/core/take<std/core/types/string>((match (p) {
                                      ((.skip std/os/path/Path((.pat02: std/core/types/string) : std/core/types/string, (.x1: (std/core/list :: V -> V)<std/core/types/string>) : (std/core/list :: V -> V)<std/core/types/string>) : std/os/path/path ) as .pat4: std/os/path/path)
                                         -> .x1;
                                    }), 1))));
                            (std/os/path/Path("", (match (parts0.2041) {
                                ((std/core/types/Optional((.parts.111: (std/core/list :: V -> V)<std/core/types/string>) : (std/core/list :: V -> V)<std/core/types/string>) : (std/core/types/optional :: V -> V)<(std/core/list :: V -> V)<std/core/types/string>> ) as .pat10: ((std/core/types/optional :: V -> V)<(std/core/list :: V -> V)<std/core/types/string>>))
                                   -> .parts.111;
                                ((.skip std/core/types/None() : (std/core/types/optional :: V -> V)<(std/core/list :: V -> V)<std/core/types/string>> ) as .pat2: ((std/core/types/optional :: V -> V)<(std/core/list :: V -> V)<std/core/types/string>>))
                                   -> (match (p) {
                                    ((.skip std/os/path/Path((.pat01: std/core/types/string) : std/core/types/string, (.x0: (std/core/list :: V -> V)<std/core/types/string>) : (std/core/list :: V -> V)<std/core/types/string>) : std/os/path/path ) as .pat3: std/os/path/path)
                                       -> .x0;
                                  });
                              })));
                          }))(f)))), (std/core/types/None<std/core/types/bool>)));
                    }));
        std/core/foreach<std/os/path/path,<(std/core/types/div :: X),(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/fsys :: X)>>(dirs, (fn<<(std/core/types/div :: X),(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/fsys :: X)>>(d: std/os/path/path){
            (std/os/dir/copy-directory(d, (std/core/types/.open<(std/core/types/(<>) :: E),<(std/core/types/div :: X),(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/fsys :: X)>,(p1 : std/os/path/path, p2 : std/os/path/path) -> std/os/path/path,(p1 : std/os/path/path, p2 : std/os/path/path) -> <(std/core/types/div :: X),(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/fsys :: X)> std/os/path/path>(std/os/path/(/))(to, (std/core/types/.open<(std/core/types/(<>) :: E),<(std/core/types/div :: X),(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/fsys :: X)>,(p : std/os/path/path) -> std/os/path/path,(p : std/os/path/path) -> <(std/core/types/div :: X),(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/fsys :: X)> std/os/path/path>((fn(p0: std/os/path/path){
                  val parts0.20410 : ((std/core/types/optional :: V -> V)<(std/core/list :: V -> V)<std/core/types/string>>)
                        = (std/core/types/Optional<(std/core/list :: V -> V)<std/core/types/string>>((std/core/take<std/core/types/string>((match (p0) {
                            ((.skip std/os/path/Path((.pat020: std/core/types/string) : std/core/types/string, (.x10: (std/core/list :: V -> V)<std/core/types/string>) : (std/core/list :: V -> V)<std/core/types/string>) : std/os/path/path ) as .pat40: std/os/path/path)
                               -> .x10;
                          }), 1))));
                  (std/os/path/Path("", (match (parts0.20410) {
                      ((std/core/types/Optional((.parts.1110: (std/core/list :: V -> V)<std/core/types/string>) : (std/core/list :: V -> V)<std/core/types/string>) : (std/core/types/optional :: V -> V)<(std/core/list :: V -> V)<std/core/types/string>> ) as .pat100: ((std/core/types/optional :: V -> V)<(std/core/list :: V -> V)<std/core/types/string>>))
                         -> .parts.1110;
                      ((.skip std/core/types/None() : (std/core/types/optional :: V -> V)<(std/core/list :: V -> V)<std/core/types/string>> ) as .pat20: ((std/core/types/optional :: V -> V)<(std/core/list :: V -> V)<std/core/types/string>>))
                         -> (match (p0) {
                          ((.skip std/os/path/Path((.pat010: std/core/types/string) : std/core/types/string, (.x00: (std/core/list :: V -> V)<std/core/types/string>) : (std/core/list :: V -> V)<std/core/types/string>) : std/os/path/path ) as .pat30: std/os/path/path)
                             -> .x00;
                        });
                    })));
                }))(d))))));
          }));
    };
  };
specialize "*" fun list-directory // inline size: 1
  = fn<<(std/core/fsys :: X)>>(dir: std/os/path/path){
    match ((std/os/dir/prim-list-dir((std/os/path/string(dir))))) {
      ((std/core/Error(((.skip std/core/Exception((.pat1: std/core/types/string) : std/core/types/string, (.pat2: std/core/exception-info) : std/core/exception-info) : std/core/exception ) as .pat0: std/core/exception) : std/core/exception) : (std/core/error :: V -> V)<(std/core/types/vector :: V -> V)<std/core/types/string>> ) as .pat: ((std/core/error :: V -> V)<(std/core/types/vector :: V -> V)<std/core/types/string>>))
         -> std/core/Nil<std/os/path/path>;
      ((.skip std/core/Ok((contents: (std/core/types/vector :: V -> V)<std/core/types/string>) : (std/core/types/vector :: V -> V)<std/core/types/string>) : (std/core/error :: V -> V)<(std/core/types/vector :: V -> V)<std/core/types/string>> ) as .pat3: ((std/core/error :: V -> V)<(std/core/types/vector :: V -> V)<std/core/types/string>>))
         -> std/core/map.5<std/core/types/string,std/os/path/path,<(std/core/fsys :: X)>>((std/core/vlist<std/core/types/string>(contents, (std/core/types/None<(std/core/list :: V -> V)<std/core/types/string>>))), (fn<<(std/core/fsys :: X)>>(name: std/core/types/string){
            (std/os/path/(/)(dir, (std/os/path/path(name))));
          }));
    };
  };
specialize "*_" fun list-directory-recursive // inline size: 1
  = fn<<(std/core/fsys :: X),(std/core/types/div :: X)>>(dir: std/os/path/path, max-depth: (std/core/types/optional :: V -> V)<std/core/types/int>){
    match ((std/core/(<.1)((match (max-depth) {
        ((std/core/types/Optional((.max-depth.756: std/core/types/int) : std/core/types/int) : (std/core/types/optional :: V -> V)<std/core/types/int> ) as .pat: ((std/core/types/optional :: V -> V)<std/core/types/int>))
           -> .max-depth.756;
        ((.skip std/core/types/None() : (std/core/types/optional :: V -> V)<std/core/types/int> ) as .pat0: ((std/core/types/optional :: V -> V)<std/core/types/int>))
           -> 1000;
      }), 0))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat1: std/core/types/bool)
         -> std/core/Nil<std/os/path/path>;
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat2: std/core/types/bool)
         -> val all : (std/core/list :: V -> V)<std/os/path/path>
              = std/os/dir/list-directory(dir);
            val dirs : (std/core/list :: V -> V)<std/os/path/path>
              = std/core/filter<std/os/path/path,<(std/core/fsys :: X),(std/core/types/div :: X)>>(all, std/os/dir/is-directory);
            val ys.851 : (std/core/list :: V -> V)<std/os/path/path>
              = std/core/flatmap<std/os/path/path,std/os/path/path,<(std/core/types/div :: X),(std/core/fsys :: X)>>(dirs, (fn<<(std/core/types/div :: X),(std/core/fsys :: X)>>(sub: std/os/path/path){
                  (std/os/dir/list-directory-recursive(sub, (std/core/types/Optional<std/core/types/int>((std/core/int-sub((match (max-depth) {
                        ((std/core/types/Optional((.max-depth.756: std/core/types/int) : std/core/types/int) : (std/core/types/optional :: V -> V)<std/core/types/int> ) as .pat: ((std/core/types/optional :: V -> V)<std/core/types/int>))
                           -> .max-depth.756;
                        ((.skip std/core/types/None() : (std/core/types/optional :: V -> V)<std/core/types/int> ) as .pat0: ((std/core/types/optional :: V -> V)<std/core/types/int>))
                           -> 1000;
                      }), 1))))));
                }));
        std/core/append<std/os/path/path>(all, ys.851);
    };
  };
fun prepend // inline size: 3
  = fn(exn: std/core/exception, pre: std/core/types/string){
    std/core/Exception((std/core/(++.1)(pre, (std/core/(++.1)(": ", (match (exn) {
            ((.skip std/core/Exception((.x: std/core/types/string) : std/core/types/string, (.pat0: std/core/exception-info) : std/core/exception-info) : std/core/exception ) as .pat: std/core/exception)
               -> .x;
          }))))), (match (exn) {
        ((.skip std/core/Exception((.pat00: std/core/types/string) : std/core/types/string, (.x0: std/core/exception-info) : std/core/exception-info) : std/core/exception ) as .pat1: std/core/exception)
           -> .x0;
      }));
  };
fun is-directory // inline size: 2
  = fn<<(std/core/fsys :: X)>>(dir: std/os/path/path){
    std/os/dir/prim-is-dir((std/os/path/string(dir)));
  };
fun is-file // inline size: 2
  = fn<<(std/core/fsys :: X)>>(path: std/os/path/path){
    std/os/dir/prim-is-file((std/os/path/string(path)));
  };