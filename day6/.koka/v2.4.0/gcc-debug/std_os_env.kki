/*
Access to the program environment and commmand line arguments.

Print the environment: `get-env().map(fn(p) { p.fst + "=" + p.snd }).join("\n").print`
*/
module interface std/os/env
 
//------------------------------
//#kki: import declarations
 
import std/core/types = std/core/types = "";
import std/core = std/core = "";
import std/os/path = std/os/path = "";
 
//------------------------------
//#kki: external imports
 
 
//------------------------------
//#kki: fixity declarations
 
 
//------------------------------
//#kki: local imported aliases
 
 
//------------------------------
//#kki: type declarations
 
pub alias env = (std/core/list :: V -> V)<(std/core/types/string, std/core/types/string)> = 1;
 
//------------------------------
//#kki: declarations
 
fun os-get-argv : () -> <(std/core/types/ndet :: X)> (std/core/types/vector :: V -> V)<std/core/types/string>;
fun os-get-env : () -> <(std/core/types/ndet :: X)> (std/core/types/vector :: V -> V)<std/core/types/string>;
// The backend compiler name.
pub fun get-cc-name : () -> <(std/core/types/ndet :: X)> std/core/types/string;
// The current compiler version.
pub fun get-compiler-version : () -> <(std/core/types/ndet :: X)> std/core/types/string;
// Return the processor maximum address size in bits (`8*sizeof(void*)`). This is usually
// equal to the `get-cpu-arch-bits` but may be different on segmented architectures. 
pub fun get-cpu-address-bits : () -> <(std/core/types/ndet :: X)> std/core/types/int;
// Return the main processor architecture: x64, x86, arm64, arm, riscv32, riscv64, alpha, ppc64, etc.
pub fun get-cpu-arch : () -> <(std/core/types/ndet :: X)> std/core/types/string;
// Return the processor architecture natural machine word size in bits.
//
// Note: Usually this equals the `get-cpu-object-bits` and `get-cpu-address-bits` on modern cpu's 
// but they can differ on segmented architectures.
// For example, on the old x86 FAR-NEAR model, the addresses are 32-bit but the maximum object size is 16-bit.
// Or on the more recent-[x32 ABI](https://en.wikipedia.org/wiki/X32_ABI) 
// the addresses and objects are 32-bits but the architecture has 64-bit registers.
pub fun get-cpu-arch-bits : () -> <(std/core/types/ndet :: X)> std/core/types/int;
// Return the available CPU's.
// This is the logical core count including hyper-threaded cores.
pub fun get-cpu-count : () -> <(std/core/types/ndet :: X)> std/core/types/int;
// Is the byte-order little-endian?
// If not, it is big-endian; other byte orders are not supported.
pub fun get-cpu-is-little-endian : () -> <(std/core/types/ndet :: X)> std/core/types/bool;
// Return the processor maximum object size in bits (`8*sizeof(size_t)`). This is usually
// equal to the `get-cpu-arch-bits` but may be different on segmented architectures. 
pub fun get-cpu-object-bits : () -> <(std/core/types/ndet :: X)> std/core/types/int;
// Return the main OS name: windows, linux, macos, unix, posix, ios, tvos, watchos, unknown.
// Sometimes has a _dash_ subsystem, like: unix-\<freebsd,openbsd,dragonfly,bsd\>, and windows-mingw.
pub fun get-os-name : () -> <(std/core/types/ndet :: X)> std/core/types/string;
val argv : (std/core/delayed :: (E, V) -> V)<<(std/core/types/ndet :: X)>,(std/core/list :: V -> V)<std/core/types/string>>;
fun .ctail-to-tuples : (xs : (std/core/list :: V -> V)<std/core/types/string>, .acc : (std/core/types/ctail :: V -> V)<env>) -> env;
fun to-tuples : (xs : (std/core/list :: V -> V)<std/core/types/string>) -> env;
val environ : (std/core/delayed :: (E, V) -> V)<<(std/core/types/ndet :: X)>,env>;
// The unprocessed command line that was used to start this program.
// On ''Node'' the first arguments will often be of the form `["node","interactive.js",...]`.
pub fun get-argv : () -> <(std/core/types/ndet :: X)> (std/core/list :: V -> V)<std/core/types/string>;
// Return the arguments that were passed to program itself.
// Strips off the initial program from the unprocessed command line.
// i.e. If a program started as:
// ````
// > node myprogram.js --flag bla
// ````
// The `arguments` list will be `["--flag","bla"]`
pub fun get-args : () -> <(std/core/types/ndet :: X)> (std/core/list :: V -> V)<std/core/types/string>;
// Get the environment variables for this program
pub fun get-env : () -> <(std/core/types/ndet :: X)> env;
// Returns the value of an environment variable `name` (or `Nothing` if not present)
pub fun get-env.1 : (name : std/core/types/string) -> <(std/core/types/ndet :: X)> (std/core/types/maybe :: V -> V)<std/core/types/string>;
 
//------------------------------
//#kki: external declarations
 
 
//------------------------------
//#kki: inline definitions
 
//.inline-section
specialize "*" fun get-env.1 // inline size: 1
  = fn<<(std/core/types/ndet :: X)>>(name: std/core/types/string){
    std/core/lookup<std/core/types/string,std/core/types/string>((std/core/force<env,<(std/core/types/ndet :: X)>>(std/os/env/environ)), (fn(nm: std/core/types/string){
        (std/core/(==.3)(nm, name));
      }));
  };
fun get-argv // inline size: 1
  = fn<<(std/core/types/ndet :: X)>>(){
    std/core/force<(std/core/list :: V -> V)<std/core/types/string>,<(std/core/types/ndet :: X)>>(std/os/env/argv);
  };
fun get-env // inline size: 1
  = fn<<(std/core/types/ndet :: X)>>(){
    std/core/force<env,<(std/core/types/ndet :: X)>>(std/os/env/environ);
  };
fun get-env.1 // inline size: 3
  = fn<<(std/core/types/ndet :: X)>>(name: std/core/types/string){
    std/core/lookup<std/core/types/string,std/core/types/string>((std/core/force<env,<(std/core/types/ndet :: X)>>(std/os/env/environ)), (fn(nm: std/core/types/string){
        (std/core/(==.3)(nm, name));
      }));
  };